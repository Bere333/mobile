type User {
  id: ID!
  name: String!
  email: String!
  emailVerifiedAt: String
  idCard: String
  createdAt: String
  updatedAt: String
  mobile: String
  mobileCountry: String
  mobileVerifiedAt: String
  isVerified: Boolean!
}

type PlanterTreesCount {
  count: Int!
}

type TreeUpdate {
  id: ID!
  updateId: Int!
  treeId: Int!
  image: String!
  status: Boolean!
  acceptedBy: String
  acceptedAt: String
  createdAt: String!
  updatedAt: String!
}

type Tree {
  id: ID!
  treeId: ID!
  gbId: Int!
  typeId: Int
  owner: String
  planter: String
  name: String!
  latitude: Float!
  longitude: Float!
  plantedDate: String!
  birthDate: String!
  fundedDate: String
  height: Int
  diameter: Int
  ambassadorBalance: Float
  planterBalance: Float
  createdAt: String!
  updatedAt: String!
  updates: [TreeUpdate]!
}

type TreeEdges {
  current_page: Int!
  data: [Tree]!
}

type TreesResponse {
  trees: TreeEdges
}

type ResponseWithMessage {
  message: String
}

type GBFactory {
  gbToPlanters(id: String!, userId: String!): String
  planterGB(address: String!): String
  greenBlocks(id: String!): Web3Result
}

type TreeFactory {
  getPlanterWithdrawableBalance: String!
}

type ApplyMutationResponse {
  message: String
}

type Query {
  """
  Returns the current user account.
  """
  me: User

  """
  Returns the info for the given tree id
  """
  tree(id: Int!): Tree

  """
  Returns all trees for a given planter
  """
  trees(address: String!, limit: Int!): TreesResponse

  """
  Returns number of trees planted by a planter with the given ETH address
  """
  planterTreesCount(address: String!): PlanterTreesCount

  GBFactory: GBFactory
  TreeFactory: TreeFactory
}

input ApplyInput {
  fullName: String!
  idCardUri: String!
}

input ApplyInput {
  name: String!
  idCard: String!
  type: String!
}

input VerifyMobileInput {
  token: String!
}

input UpdateMobileInput {
  mobile: String!
  mobileCountry: String!
}

type Mutation {
  apply(input: ApplyInput!): ApplyMutationResponse
  verifyMobile(input: VerifyMobileInput!): ResponseWithMessage
  requestSMS(input: Any): ResponseWithMessage
  updateMobile(input: UpdateMobileInput!): ResponseWithMessage
}

scalar Web3Result
scalar Any
